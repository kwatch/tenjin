.######################################################################
.$ ANN: pyTenjin 0.9.0 - very fast and full-featured template engine

I released pyTenjin 0.9.0
http://www.kuwata-lab.com/tenjin/
http://pypi.python.org/pypi/Tenjin/

This release contains a lot of enhancements and changes.
Also you should read planned changes in the next release (1.0.0).
See
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#planned-changes
for details.


Overview
--------

pyTenjin is very fast and full-featured template engine for Python.

  * Very fast (about 10 times faster than Django template engine)
  * Easy to learn (no need to learn template-original language)
  * Full-featured (nestable layout template, partial template, preprocessing, ...)
  * Google App Engine supported


Documents
---------

  * User's Guide
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
  * Examples
      http://www.kuwata-lab.com/tenjin/pytenjin-examples.html
  * CHANGES
      http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Enhancements from 0.8.1
-----------------------

  * Performance improved (about 5%).

  * (IMPORTANT!!)
    Fragment cache supported.
    See
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#fragment-cache
    for details.

  * (IMPORTANT!!)
    include() now takes keyword arguments as local variables.
    ex.
      <?py include('header.pyhtml', title='Example') ?>

  * Add new module 'tenjin.gae'.

  * Add 'input' argument to tenjin.Template() to create template object without file.
    ex.
      input = "<p>Hello ${name}</p>"
      t = tenjin.Template(None, input=input)
      html = t.render({'name': 'World'})

  * Add tenjin.Engine.add_template() to add template object explicitly.

  * User's guide (doc/users-guide.html) is rewrited entirely.

  * Add benchmark for Jinja2.


Changes from 0.8.1
------------------

  * (IMPORTANT!!)
    It is strongly recommended to close 'if', 'for', 'while', ... by
    corresponding '#endif', '#endfor', '#endwhile', and so on.
    See
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#planned-changes
    for details.

  * (IMPORTANT!!)
    Google App Engine support is changed. All you have to do is to call
    tenjin.gae.init() at first.
    See
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html#google-appengine
    for details.

  * (IMPORTANT!!)
    tenjin.Engine is changed to share a cache storage between engines by default.
    This improves performance of Tenjin but your test scripts may get errors.
    If you get errors in your test scripts, clear cache storage for each test.

        def setUp(self):
	    tenjin.Engine.cache.clear()

    If you prefer previous behaviour, set tenjin.Engine.cache to None.

        ## create new MarshalCacheStorage object for each engine
        tenjin.Engine.cache = None
    
  * Now you can set default template class to tenjin.Engine.templateclass.
    ex.
      tenjin.Engine.templateclass = MyTemplate

  * 'cache' argument of tenjin.Engine() is changed.
     [old behaviour] if 'cache' is None, cache template object into memory.
     [new behaviour] if 'cache' is None, use default cache storage.

  * Default preamble is changed from "print ''.join(_buf)" to
    "print(''.join(_buf))".

  * 'doc/faq.html' is integrated into 'doc/users-guide.html'.

  * All test scripts are changed to import oktest instead of unittest.


Bug fixes
---------

  * Fixed to set correct file path of template object which is loaded from cache.

  * Fixed a bug that 'pytenjin -sbN' didn't trim line number on the last line


.######################################################################
.$ ANN: pyTenjin 0.8.1 - much faster template engine than Django

I released pyTenjin 0.8.1.
http://www.kuwata-lab.com/tenjin/
http://pypi.python.org/pypi/Tenjin/

pyTenjin is the fastest template engine for Python.

* Very fast (about 10 times faster than Django template engine)
* Easy to learn (no need to learn template-original language)
* Full-featured (layout template, partial template, preprocessing, ...)
* Very small (only 1,200 lines, one file)

This is a bug fix release.
See CHANGES for details.
  http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


Bugfix from 0.8.1
-----------------

  * Fix bugs on CacheStorage#unset(). (thanks Steve)

  * Fix tenjin.helpers.html.new_cycle() to work on Python 3.0.


Changes from 0.8.1
------------------

  * Update 'doc/faq.html' and add new section.
    'Is it possible to change indent restriction more flexible?'
    http://www.kuwata-lab.com/tenjin/pytenjin-faq.html#faq-flexibleindent


Documents
---------

  * User's Guide
      http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html
  * FAQ
      http://www.kuwata-lab.com/tenjin/pytenjin-faq.html
  * CHANGES
      http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt


.######################################################################
.$ ANN: pyTenjin 0.8.0 - much faster template engine than Django

I have released pyTenjin 0.8.0
http://www.kuwata-lab.com/tenjin/

In this release, I included some ideas that Steve suggested.
Thank you very much, Steve.


Changes from 0.7.0
------------------

  * !!IMPORTANT!!
    HTML helper function 'tagattr()' is renamed to 'tagattrs()'.
    (Notice that new 'tagattr()' is added. See below.)

  * 'tagattrs()' is changed to add ' ' (space) at the first character.
    ex.
      (0.7.0)  tagattr(klass='error')     #=> 'class="error"'
      (0.7.1)  tagattrs(klass='error')    #=> ' class="error"'

  * 'tagattrs()' is changed to handle 'checked', 'selected', and
    'disabled' attributes.
    ex.
       >>> from tenjin.helpers.html import *
       >>> tagattrs(checked=True, selected='Y', disabled=1)
       ' checked="checked" selected="selected" disabled="disabled"'
       >>> tagattrs(checked=False, selected='', disabled=0)
       ''


Bugfix
------

  * !!IMPORTANT!!
    Template caching is changed to keep template file's timestamp
    instead of create time of cached object. See
    http://groups.google.com/group/kuwata-lab-products/browse_thread/thread/a0d447c282fb383d#msg_de39557405c9b656
    for details. (Thanks Steve)


Enhancements
------------

  * Add new HTML helper function 'tagattr()'.
    (Notice that 'tagattr()' in 0.7.0 is renamed into 'tagattrs()'.)
    ex.
      >>> from tenjin.helpers.html import *
      >>> tagattr('size', 20)
      ' size="20"'
      >>> tagattr('size', 0)
      ''
      >>> tagattr('size', 20, 'large')
      ' size="large"'
      >>> size = 20        # you can use tagattrs() instead of tagattr()
      >>> tagattrs(size=(size and 'large'))
      ' size="large"'

  * Add new HTML helper function 'new_cycle()'.
    ex.
      >>> from tenjin.helpers.html import *
      >>> cycle = new_cycle('odd, 'even')
      >>> cycle()
      'odd'
      >>> cycle()
      'even'
      >>> cycle()
      'odd'
      >>> cycle()
      'even'

  * (experimental) Template converter is changed to add dummy if-statement
    when first Python statement is indented. (Thanks Steve)
    ex.
      $ cat ex.pyhtml
      <html>
        <body>
          <ul>
            <?py for item in items: ?>
            <li>${item}</li>
            <?py #end ?>
          </ul>
        </body>
      </html>
      $ pytenjin -sb ex.pyhtml
      _buf.extend(('''<html>
        <body>
          <ul>\n''', ));
      if True: ## dummy
            for item in items:
                _buf.extend(('''      <li>''', escape(to_str(item)), '''</li>\n''', ));
            #end
            _buf.extend(('''    </ul>
        </body>
      </html>\n''', ));

  * Update User's Guide and FAQ.


Have fun!

--
regards,
makoto kuwata


.######################################################################
.$ ANN: pyTenjin 0.7.0 - much faster template engine than Django

Please give me a chance to introduce my work.

I have released pyTenjin 0.7.0
http://www.kuwata-lab.com/tenjin/

pyTenjin is the fastest template engine for Python.

* Very fast (about 10 times faster than Django template engine)
* Easy to learn (no need to learn template-original language)
* Full-featured (layout template, partial template, preprocessing, ...)
* Very small (only 1,200 lines, one file)

And Goole AppEngine is now supported in this release.
You can use pyTenjin on Google AppEngine instead of Django template.
See
 http://www.kuwata-lab.com/tenjin/pytenjin-faq.html#faq-google-appengine
for details.


Enhancements and Changes on 0.7.0
---------------------------------

There are many enhancements and changes on 0.7.0.  See
 http://www.kuwata-lab.com/tenjin/pytenjin-CHANGES.txt
for details.


Download and Install
--------------------

  $ wget http://downloads.sourceforge.net/tenjin/Tenjin-0.7.0.tar.gz
  $ tar xzf Tenjin-0.7.0.tar.gz
  $ cd Tenjin-0.7.0
  $ sudo python setup.py install


Documents and Materials
-----------------------

* User's Guide
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html

* FAQ
  http://www.kuwata-lab.com/tenjin/pytenjin-faq.html

* Examples
  http://www.kuwata-lab.com/tenjin/pytenjin-examples.html

* (Presentation) Tenjin - the fastest template engine in the world
  http://www.slideshare.net/kwatch/tenjin-the-wastest-template-engine-in-the-world


Have fun!

--
regards,
makoto kuwata


.######################################################################
.$ [ANN] pyTenjin 0.7.0 - the fastest and full-featured template engine

Hi,

I have released pyTenjin 0.7.0
http://www.kuwata-lab.com/tenjin/

pyTenjin is the fastest template engine for Python.
It is not only very fast but also full-featured and easy-to-use.
You can embed Python statements and expressions into your text file.
Tenjin converts it into Python program and evaluate it.

Features:
* very fast
  - x2 faster than Mako
  - x3 faster than Cheetah and Myghty
  - x9 faster than Django
  - x60 faster than Kid
* Full-featured
  - layout template
  - partial template
  - capturing
  - preprocessing
  - and so on...

You can see the detail of benchmark at:
http://www.kuwata-lab.com/tenjin/
(benchmark script is included in pyTenjin distribution.)


Enhancements in 0.7.0
---------------------

* Python 3.0 is now supported officially.
* Google AppEngine (GAE) supported.
  http://www.kuwata-lab.com/tenjin/pytenjin-faq.html#faq-google-appengine
* Logging support.
* enerate_tostrfun() can take not only encode-encoding but also
  decode-encoding.
* (Experimental) HTML helper functions are now provided.
* New command-line option '-a cache' supported.
* You can share caches between all engine objects.
* Pickle-base and text-base template caching support.

See CHANGES.txt for details.
  http://www.kuwata-lab.com/pytenjin-CHANGES.txt


Changes in 0.7.0
----------------

* 'cache' option for tenjin.Engine() changed.
* to_str() is changed to encode unicode object into binary(=str)
    using utf-8 encoding in default.
* Benchmark script now skips to do benchmark template libraries
  which are failed to import.


Bugfix in 0.7.0
----------------
* In preprocessing, error was raised when expression is not string.
  Now fixed.


Download and Install
--------------------

Type:

  $ sudo eazy_install Tenjin

Or:

  $ wget http://downloads.sourceforge.net/tenjin/Tenjin-0.7.0.tar.gz
  $ tar xzf Tenjin-0.7.0.tar.gz
  $ cd Tenjin-0.7.0
  $ sudo python setup.py install


Documents
---------

* User's Guide
  http://www.kuwata-lab.com/tenjin/pytenjin-users-guide.html

* FAQ
  http://www.kuwata-lab.com/tenjin/pytenjin-faq.html

* Examples
  http://www.kuwata-lab.com/tenjin/pytenjin-examples.html

* (Presentation) Tenjin - the fastest template engine in the world
  http://www.slideshare.net/kwatch/tenjin-the-wastest-template-engine-in-the-world



Have fun!

--
regards,
makoto kuwata


.######################################################################
.$ [ANN] pyTenjin 0.6.2 - a fast and full-featured template engine

I have released pyTenjin 0.6.2.
http://www.kuwata-lab.com/tenjin/
This is a tiny bug fix release.

pyTenjin is the fastest template engine for Python.
Not only very fast, but also full-featured and easy-to-use is pyTenjin.
You can embed Python statements and expressions into your text file.
Tenjin converts it into Python program and evaluate it.

Features:
* very fast
  - x2 faster than Mako
  - x3 faster than Cheetah and Myghty
  - x9 faster than Django
  - x60 faster than Kid
* Full-featured
  - layout template
  - partial template
  - capturing
  - preprocessing
  - and so on...

You can see the detail of benchmark at:
http://www.kuwata-lab.com/tenjin/
(benchmark script is included in pyTenjin distribution.)


Installation:

   $ easy_install Tenjin
   ## or download, extract, and execute 'setup.py'


Example: template.pyhtml

   <h1>${title}</h1>
   <ul>
   <?py for item in items: ?>
     <li>${item}
         #{item}</li>
   <?py #end ?>
   </ul>

Example: main.py

   import tenjin
   from tenjin.helpers import to_str, escape
   engine = tenjin.Engine()
   context = { 'title': 'pyTenjin Example',
               'items': ['<AAA>', 'B&B', '"CCC"'] }
   output = engine.render('template.pyhtml', context)
   print output,

Example: result

   $ python main.py
   <h1>pyTenjin Example</h1>
   <ul>
     <li>&lt;AAA&gt;
         <AAA></li>
     <li>B&amp;B
         B&B</li>
     <li>&quot;CCC&quot;
         "CCC"</li>
   </ul>


See user's guide and examples at the above page for details.
New release of pyTenjin will be informed at:
http://www.kuwata-lab.com/support/


Release 0.6.2:

[Changes]

  * When '-S', '-a retrieve', '-X', or '-a statements' specified,
    pytenjin command replaces text before expressions into spaces
    and print it.

[Bugfix]

  * pytenjin command printed "\n\n" instead of "\n" when '-U' specified.
    Fixed to print "\n".


--
regards,
makoto kuwata

.######################################################################

.$ [ANN] pyTenjin 0.6.1 - a fast and full-featured template engine

I have released Tenjin 0.6.1.
http://www.kuwata-lab.com/tenjin/
In this release, benchmark script is enhanced to support
Genshi, Mako, and Templetor.

Tenjin is a very fast and full-featured temlate engine.
You can embed Python statements and expressions into your text file.
Tenjin converts it into Python program and evaluate it.

How fast Tenjin is? It is about:
* three times faster than Cheetah and Myghty
* nine times faster than Django
* sixty times faster than Kid
* twice faster than Mako
You can see the detail of benchmark at:
http://www.kuwata-lab.com/tenjin/
(benchmark script is included in Tenjin distribution.)

Tenjin is not only so fast and lightweight but also full-featured.
It supports:
* layout template
* partial template
* capturing
* preprocessing
* and so on...

See user's guide and examples at the above page for details.
New release of Tenjin will be informed at:
http://www.kuwata-lab.com/support/


Release 0.6.1:

[Enhancements]

  * Benchmark script ('benchmark/bench.py') is rewrited.
  * Benchmark supports Genshi, Mako, and Templetor.
  * Add examples.

[Bugfix]

  * Typo in User's Guide is fixed.


--
makoto kuwata

.######################################################################

.$ [ANN] pyTenjin 0.6.0 - a fast and full-featured template engine

I have Released pyTenjin 0.6.0.
http://www.kuwata-lab.com/tenjin/
This is a first release of pyTenjin.

pyTenjin is a very fast and full-featured temlate engine based on
embedded Python.
You can embed Python statements and expressions into your text file.
pyTenjin converts it into Python program and evaluate it.

Features:
* Very fast (three times faster than Cheetah, nine times faster than Djano).
* Lightweight (only one file which contains about 1000 lines)
* Not break HTML design because it uses XML Processing
  Instructions (PI) as embedded notation for Python statements.
* Secure because it supports escaping expression value by default.
* Auto caching of converted Python code.
* Nestable layout template
* Inlucde other templates
* Capture part of template
* Load YAML file as context data
* Preprocessing support

See user's guide and examples at the above page.

--
regards
kwatch
